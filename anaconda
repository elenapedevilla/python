# Aprire Spyder
conda activate geo
spyder

# Spyder 
# Libs 
import pandas as pd
import rasterio # Per leggere il raster abbiamo bisogno di rasterio
import geopandas as gpd
import matplotlib.pyplot as plt # Libreria per fare grafici, per fare plot
import numpy as np # Serve per fare delle operazioni matematiche sugli array/sulle matrici
from rasterio.plot import show # Serve per plottare il raster, per gestire i dati raster



# Esempio di come si fa un plot del seno (e poi anche del coseno)
# Asse x
x = np.arange(0, 4*np.pi, 0.1) # np.arange va a creare l'inizio, fine, e passo del grafico; il grafico parte da 0 e finisce a 4 pi greco (= pi doppio); passo = 0.1

# Asse y
y1 = np.sin(x) # L'asse x va plottata in funzione del seno
# y2 = np.cos(x)

plt.plot(x, y1)
plt.show()
# Run e vediamo il plot



# Stessa cosa, usiamo anche l'altra asse y (y2)
import matplotlib.pyplot as plt
import numpy as np

# Asse x
x = np.arange(0, 4*np.pi, 0.1) # Inizio, fine, passo del grafico

# Asse y
y1 = np.sin(x)
y2 = np.cos(x)

plt.plot(x, y1, x, y2) # Così mi plotta seno e coseno
plt.show()



# Possiamo anche aggiungere una terza asse y
import matplotlib.pyplot as plt
import numpy as np

# Asse x
x = np.arange(0, 4*np.pi, 0.1) # Inizio, fine, passo del grafico

# Asse y
y1 = np.sin(x)
y2 = np.cos(x)
y3 = np.cos(x//2)
plt.plot(x, y1, x, y2, x, y3)
plt.show()



# Stessa cosa, ma modo di scrittura diverso/più elegante
import matplotlib.pyplot as plt
import numpy as np

# Asse x
x = np.arange(0, 4*np.pi, 0.1) # Inizio, fine, passo del grafico

# Asse y
y1 = np.sin(x)
y2 = np.cos(x)

fig, ax = plt.subplots() # Andiamo a creare dei subplot; utilizzando questo metodo dobbiamo specificare figura (fig), assi (ax) e poi mettere i subplot

plt.plot(x, y1, label = 'sin(x)') # Questo è il primo subplot; ogni subplot è il plot di una funzione
plt.plot(x, y2, label = 'cos(x)')
plt.legend() # Per inserire la legenda

plt.title("sin(x) and cos(x) plots")
plt.xlabel("xvalues from 0 to 4pi") # Sull'asse x ci sono i valori di 0 a 4 pi greco; "" perché sono commenti, è il testo che noi andremo ad aggiungere al grafico per completarlo
plt.ylabel("sin(x) and cos(x)") # Sull'asse y ci sono i valori di seno e coseno



# Plot da csv
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd 
head = ['stazione', 'data', 'ora', 'temp_min', 'temp_max', 'umidità_min', 'umidità_max', 'precipitazioni', 'vento (m/s)', 'direzione']
csv = pd.read_csv(r"C:\lab2_python\dati_meteo_ostiglia_nuovi.csv", names = head)

csv['data'] = csv['data'].astype('datetime64[ns]') # datetime64[ns] è un formato per la lettura della data; quindi riconosce che questa colonna contiene una data (anno, mese e giorno)

# Calcolo valori medi
csv['temp_mean'] = round((csv['temp_max'] + csv['temp_min'])/2, 1) # Come avevamo già fatto: temp max + temp min e il tutto diviso 2; , 1 per dire che noi per questo calcolo andiamo a prendere solo il primo numero dopo la virgola 
csv['umid_mean'] = round((csv['umidità_max'] + csv['umidità_min'])/2, 1)  
# Se adesso clicchiamo su csv vediamo che sono state aggiunte due colonne: quella relativa alla temperatura media e quella relativa all'umidità media



# Plot con serie temporale
plt.plot_date(csv['data'], csv['temp_mean'], label = 'mean', linestyle = 'solid', fmt = 'o') 
# Sull'asse x prende la data, quindi i giorni che sono sul csv; sull'asse y abbiamo la temperatura media
# Come ettichetta scriviamo 'mean', perché sappiamo che si tratta di temperatura
# Linestyle è lo stile della linea; con 'solid' mette una linea continua; con '--' mi mette la linea trattegiata; '_.' mette una linea poi punto ecc.; ':' mette una linea a punti
# fmt = 'o' -> mette la palllina; con '*' si mette una stellina

# Per girare le etichette dell'asse x, così non si sovrappongono
plt.xticks(rotation = 90) # Si può naturalmente anche mettere a 45 o qualsiasi altro grado; normalmente però o 90 o 45

# Aggiungere i dettagli (titolo plot, nomi assi, legenda ecc.)
plt.title('Temperature plot')
plt.xlabel('Data (yyyy-mm-dd)')
plt.ylabel('Mean temperature (°C)')
plt.legend()



# Plot di più linee insieme
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd 
head = ['stazione', 'data', 'ora', 'temp_min', 'temp_max', 'umidità_min', 'umidità_max', 'precipitazioni', 'vento (m/s)', 'direzione']
csv = pd.read_csv(r"C:\lab2_python\dati_meteo_ostiglia_nuovi.csv", names = head)

csv['data'] = csv['data'].astype('datetime64[ns]')

# Calcolo valori medi
csv['temp_mean'] = round((csv['temp_max'] + csv['temp_min'])/2, 1)
csv['umid_mean'] = round((csv['umidità_max'] + csv['umidità_min'])/2, 1)  

plt.title('Temperature plot')
plt.plot_date(csv['data'], csv['temp_mean'], label = 'mean', linestyle = '--', fmt = '*')
plt.plot_date(csv['data'], csv['temp_max'], label = 'max', linestyle = '--', fmt = '*')
plt.plot_date(csv['data'], csv['temp_min'], label = 'min', linestyle = '--', fmt = '*')
plt.xticks(rotation = 90)
plt.xlabel('Data (yyyy-mm-dd)')
plt.ylabel('Mean temperature (°C)')
plt.legend()



# Immagine che contiene due plot separati
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd 
head = ['stazione', 'data', 'ora', 'temp_min', 'temp_max', 'umidità_min', 'umidità_max', 'precipitazioni', 'vento (m/s)', 'direzione']
csv = pd.read_csv(r"C:\lab2_python\dati_meteo_ostiglia_nuovi.csv", names = head)

csv['data'] = csv['data'].astype('datetime64[ns]')

# Calcolo valori medi
csv['temp_mean'] = round((csv['temp_max'] + csv['temp_min'])/2, 1)
csv['umid_mean'] = round((csv['umidità_max'] + csv['umidità_min'])/2, 1)  

# Subplots
plt.figure(figsize = (8, 5), tight_layout = True) # Figsize(h, v) # figsize = figura con dimensioni che scelgo: 8 è la dimensione orizzontale, 5 è quella verticale; tight_layout si deve mettere
plt.suptitle('Plot vari...', size = 45) # Titolo superiore; size = dimensione del carattere del titolo

# Plot 1
plt.subplot(1,2,1) # Righe, colonne, numero plot in serie; si va a specificare quante righe ha il plot, quante colonne e qual è il numero di plot in serie
plt.title('Temperature plot') # Titolo del primo plot
plt.plot_date(csv['data'], csv['temp_mean'], label = 'mean', linestyle = '--', fmt = '*')
plt.plot_date(csv['data'], csv['temp_max'], label = 'max', linestyle = '--', fmt = '*')
plt.plot_date(csv['data'], csv['temp_min'], label = 'min', linestyle = '--', fmt = '*')
plt.xticks(rotation = 90)
plt.xlabel('Data (yyyy-mm-dd)')
plt.ylabel('Mean temperature (°C)')
plt.legend()

# Plot 2
plt.subplot(1,2,2) # 1 = una riga; 2 = due colonne; 2 alla fine perché è il secondo plot all'interno della serie
plt.bar(csv['data'], csv['precipitazioni']) # Sull'asse x = data; sull'asse y = precipitazioni
plt.xticks(rotation = 90)
plt.title('Precipitation barplot')
plt.xlabel('Data (yyyy-mm-dd)')
plt.ylabel('Precipitaion (mm)')
# Qua non mettiamo plt.legend(), perché essendo un grafico a barre non abbiamo la legenda, non serve



# Scatterplot
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd 
head = ['stazione', 'data', 'ora', 'temp_min', 'temp_max', 'umidità_min', 'umidità_max', 'precipitazioni', 'vento (m/s)', 'direzione']
csv = pd.read_csv(r"C:\lab2_python\dati_meteo_ostiglia_nuovi.csv", names = head)

csv['data'] = csv['data'].astype('datetime64[ns]')

# Calcolo valori medi
csv['temp_mean'] = round((csv['temp_max'] + csv['temp_min'])/2, 1)
csv['umid_mean'] = round((csv['umidità_max'] + csv['umidità_min'])/2, 1) 

# Scatterplot
plt.title('Scatterplot')
plt.scatter(csv['temp_mean'], csv['umid_mean'])
plt.xlabel('Mean temperature(°C)')
plt.ylabel('Mean humidity (g/m^3')



# Plot con 4 grafici: temperatura (minima, media, massima), umidità (minima, media, massima), precipitazioni, scatterplot 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd 
head = ['stazione', 'data', 'ora', 'temp_min', 'temp_max', 'umidità_min', 'umidità_max', 'precipitazioni', 'vento (m/s)', 'direzione']
csv = pd.read_csv(r"C:\lab2_python\dati_meteo_ostiglia_nuovi.csv", names = head)

csv['data'] = csv['data'].astype('datetime64[ns]')

# Calcolo valori medi
csv['temp_mean'] = round((csv['temp_max'] + csv['temp_min'])/2, 1)
csv['umid_mean'] = round((csv['umidità_max'] + csv['umidità_min'])/2, 1)  

# Subplots
plt.figure(figsize = (8, 8), tight_layout = True) # Abbiamo cambiato grandezza dell'immagine
plt.suptitle('Plot vari...', size = 45) 

# Plot 1
plt.subplot(2,2,1) 
plt.title('Temperature plot')
plt.plot_date(csv['data'], csv['temp_mean'], label = 'mean', linestyle = '--', fmt = '*')
plt.plot_date(csv['data'], csv['temp_max'], label = 'max', linestyle = '--', fmt = '*')
plt.plot_date(csv['data'], csv['temp_min'], label = 'min', linestyle = '--', fmt = '*')
plt.xticks(rotation = 90)
plt.xlabel('Data (yyyy-mm-dd)')
plt.ylabel('Mean temperature (°C)')
plt.legend()

# Plot 2
plt.subplot(2,2,2) 
plt.title('Humidity plot') 
plt.plot_date(csv['data'], csv['umid_mean'], label = 'mean', linestyle = '--', fmt = '*')
plt.plot_date(csv['data'], csv['umidità_max'], label = 'max', linestyle = '--', fmt = '*')
plt.plot_date(csv['data'], csv['umidità_min'], label = 'min', linestyle = '--', fmt = '*')
plt.xticks(rotation = 90)
plt.xlabel('Data (yyyy-mm-dd)')
plt.ylabel('Mean umidità (g/m^3)')
plt.legend()

# Plot 3
plt.subplot(2,2,3) 
plt.bar(csv['data'], csv['precipitazioni']) 
plt.xticks(rotation = 90)
plt.title('Precipitation barplot')
plt.xlabel('Data (yyyy-mm-dd)')
plt.ylabel('Precipitaion (mm)')

# Plot 4
plt.subplot(2,2,4) 
plt.title('Scatterplot')
plt.scatter(csv['temp_mean'], csv['umid_mean'])
plt.xlabel('Mean temperature(°C)')
plt.ylabel('Mean humidity (g/m^3')



# Aprire un raster
# Libs 
import pandas as pd
import rasterio # Per leggere il raster abbiamo bisogno di rasterio
import geopandas as gpd
import matplotlib.pyplot as plt # Serve per plottare il raster
from rasterio.plot import show

raster_file = (r"C:\lab2_python\pianosa\pianosa_dem.tif")
raster = rasterio.open(raster_file) # Con la funzione rasterio.open si apre il raster

plt.imshow(raster.read(1), cmap='gist_earth') # raster.read(1) = mi deve mostrare la prima banda; Gist_earth dà il colore alla mappa 
# Abbiamo importato l'immagine

# Interrogazione del raster nella console
# raster.name -> stampa il percorso del raster (il path)
# raster.mode -> modalità, in questo caso r, quindi lettura, non può essere sovrascritto
# raster.width -> largezza del raster
# raster.height -> altezza del raster 
# raster.crs -> coordinate reference system, stampa tutti i dati riguardanti il sistema di riferimento
# raster.indexes -> quante bande ha il raster
# band = raster.read(1) -> vado a richiamare la variabile: band -> stampa il raster letto come matrice
# band[78,45] -> 78 e 45 sono coordinate che abbiamo inserito noi in questo caso; ci dice il valore di quota in quel determinato punto (in quelle coordinate)


# Se scriviamo: plt.imshow(raster.read(1), cmap='???') -> esce un plot bianco e nella console vediamo tutti i nomi possibili di colori che possiamo dare all'immagine (cfr. ColorRampPalette in R)



# Plot insieme: raster + csv
# Libs
import pandas as pd
import rasterio
import geopandas as gpd
import matplotlib.pyplot as plt
from rasterio.plot import show

# File csv contenente i punti con le coordinate
csv_file = (r"C:\lab2_python\pianosa\points_pianosa.csv")

# File raster da campionare
raster_file = (r"C:\lab2_python\pianosa\pianosa_dem.tif")

# Lettura del dataframe con pandas
df = pd.read_csv(csv_file) 

# Apertura del raster con rasterio
raster = rasterio.open(raster_file)

# 1) Creare il geodataframe
df = gpd.GeoDataFrame(df, geometry = gpd.points_from_xy(df['xcoord'], df['ycoord'])) # Gli dico che il geodataframe lo deve creare dalla coordinata x e dalla coordinata y delle colonne del dataframe; quindi sovrascrive questa variabile e me la trasforma in geodataframe
# Se adesso si clicca il Variable Explorer vediamo una colonna in più: Geometry; adesso se carico questa cosa su qgis non devo specificare le coordinate e il tipo di geometria, lo prende in automatico

# Scrivere una funzione che crea il geodataframe
# Il tutto si può anche scrivere in forma di una funzione, così è più comodo quando lo si deve andare a richiamare
def geo_dataframe(df):
    geo_df = gpd.GeoDataFrame(df, geometry = gpd.points_from_xy(df['xcoord'], df['ycoord'])) 
    return geo_df

df = geo_dataframe(df)
# Succede la stessa identica cosa di prima, solo che abbiamo utilizzato la funzione

# 2) Plot del raster (in realtà per questa operazione questo passaggio non è necessario)
plt.imshow(raster.read(1), cmap='gist_earth')

# 2.1) plot del raster e del csv 
fig, ax = plt.subplots()
base = show(raster, ax = ax, cmap = 'gist_earth') # La base della figura è il raster; ax sono gli assi
df.plot(ax = ax, color = 'red', markersize = 5) # Il sopra della figura è il geodataframe; è quello che contiene il csv aperto con pandas
# Vedremo i punti sopra il raster (sopra la figura)



# Campionamento del raster 
# Una volta che abbiamo fatto il plot abbiamo visto dove sono i punti, ma ora da quei punti vogliamo andare a leggere il rispettivo valore che c'è nel raster: vogliamo un csv che contiene i campi del csv precedente più alla fine una colonna che contiene i valori di quota 
import pandas as pd
import rasterio
import geopandas as gpd
import matplotlib.pyplot as plt
from rasterio.plot import show

# --- Funzioni ---
def geo_dataframe(df):
    geo_df = gpd.GeoDataFrame(df, geometry = gpd.points_from_xy(df['xcoord'], df['ycoord'])) 
    return geo_df

# -------
raster_file = (r"C:\lab2_python\pianosa\pianosa_dem.tif")
csv_file = (r"C:\lab2_python\pianosa\points_pianosa.csv")

df = pd.read_csv(csv_file)
raster = rasterio.open(raster_file)

df = geo_dataframe(df)


# Lista dei valori campionati
# Creiamo una lista in cui andremo ad appendere in successione i valori e i campi precedenti e i valori che verranno campionati
L = []
for index, row in df.iterrows(): # Per andare a scorrere un dataframe serve il ciclo for; per tutti gli indici e le righe andiamo ad eseguire un'iterazione nella coppia righe-indici sul dataframe
    # Coordinate che si trovano nel csv (df); gli andiamo a dire che le coordinate x e y corrispondono alle coordinate x e y del dataframe; serve una corrispondenza per poterle leggere, altrimenti non si riesce ad effettuare un campionamento
    x = row['xcoord']
    y = row['ycoord']
    # Trasformazione della coordinata del dataframe in coordinate del raster, così facendo si può andare a leggere quali sono le coordinate raster rispetto a quelle all'interno del csv
    raster_x, raster_y = raster.index(x, y)
    # Campionamento del valore del raster alla coordinata
    value = raster.read(1, window = ((raster_y, raster_y +1), (raster_x, raster_x + 1))) # Il valore di quota lo andiamo a leggere dal raster, sulla banda 1, con una finestra che prevede che per ogni ciclo venga incrementata la coordinata per poter andare a leggerle in successione e per poter aggiungerle poi successivamente al csv
    # Aggiunta del valore alla lista dei valori campionati; si va ad aggiungere alla lista che abbiamo creato prima il valore letto in quella posizione, in quelle coordinate
    L.append(float(value[0][0]))
# Aggiunta dei valori al dataframe; finito il ciclo creiamo una nuova colonna: viene appesa una nuova colonna che si chiama 'quota'
df['quota'] = L
# Adesso se si apre il Variable Explorer si vede che abbiamo creato una nuova colonna relativa ai valori di quota estratti dal csv


# Ora scarichiamo questo csv contenente la nuova colonna (quella della quota)
# Nella shell:
df.to_csv(r"C:\lab2_python\pianosa\points_pianosa_sampled.csv", index = False) # Abbiamo il nuovo file creato (abbiamo aggiunto al nome _sample)

# Creazione grafico a barre delle quote
plt.bar(df['luogo'], df['quota']) # Sull'asse x vogliamo il nome dei luoghi (che sono specificati nel dataframe), sull'asse y vogliamo la quota
plt.xticks(rotation = 90)
plt.title('Height barplot')
plt.xlabel('Places') # Nome asse x
plt.ylabel('Sampled height') # Nome asse y



# Utilizzo di più raster contemporaneamente (in questo caso abbiamo semplicemente copiato lo stesso raster più volte; normalmente si ha lo stesso raster con le stesse coordinate/della stessa zona, ma con informazioni diverse: NDVI, diversi indici ecc.)
# Da questi raster dobbiamo andare ad estrarre tutti i valori contenuti nel loro pixel attraverso il csv: nuove colonne con all'interno i valori dei diversi pixel dei diversi raster
import os 
import pandas as pd
import rasterio
import geopandas as gpd
import matplotlib.pyplot as plt
from rasterio.plot import show

# --- Funzioni ---
def geo_dataframe(df):
    geo_df = gpd.GeoDataFrame(df, geometry = gpd.points_from_xy(df['xcoord'], df['ycoord'])) 
    return geo_df

# -------
csv_file = (r"C:\lab2_python\pianosa\points_pianosa.csv")
rast_path = (r"C:\lab2_python\pianosa_tanti") # Abbiamo più raster, quindi utilizziamo il path della cartella

# Apertura del fiel csv con pandas
df = pd.read_csv(csv_file)
# Geodataframe
df = geo_dataframe(df)

# Ciclo attraverso i file raster 
for raster_file in os.listdir(rast_path): # Utilizzo della libreria os; per vedere cosa abbiamo nella libreria (in questo caso avendo messo la directory C:\lab2_python\pianosa_tanti avremo i nostri 4 raster) scrivere nella shell: os.listdir(rast_path)
    # Apertura del raster con rasterio
    raster = rasterio.open(rast_path + '\\' + raster_file) # Vado ad aprire il primo raster che trovo: prende prima il percorso/path di pianosa_tanti e poi il nome del primo raster (che vediamo nella shell)
    
    # Lista dei valori campionati
    L = []
    # Ciclo attraverso le righe del dataframe
    for index, row in df.iterrows():
        # Coordinata x e y della riga corrente del csv
        x = row['xcoord']
        y = row['ycoord']
        # Trasformazione della coordinata in coordinate del raster
        raster_x, raster_y = raster.index(x, y)
        # Campionamento del valore del raster alla coordinata 
        value = raster.read(1, window = ((raster_y, raster_y + 1), (raster_x, raster_x + 1)))
        # Aggiunta del valore alla lista dei valori campionati
        L.append(float(value[0][0]))
    # Aggiunta dei valori al dataframe 
    column_name = 'quota_' + raster_file.split('.')[0] # Nome colonna basato sul nome del raster; 'quota_' = prima del nome del raster verrà inserito il nome quota_; raster_file.split('.') significa che il nome del raster (che vediamo nella shell) viene splittato: tutto ciò che si trova dopo il . viene tolto (in questo caso, quindi, .tif; quindi il nome alla fine sarà pianosa_dem_1, pianosa_dem_2 ecc.
    df[column_name] = L

# Salvataggio del dataframe in un file csv
output_csv = (r"C:\lab2_python\pianosa_output.csv") # Creazione di un csv di output
df.to_csv(output_csv, index = False)
# Su Variable Explorer in df ora vediamo le quote dei diversi raster, in questo caso saranno uguali per ogni set di coordinate, in quanto non abbiamo utilizzato raster diversi, ma abbiamo 4 copie del medesimo raster
# Se avessi usato ad es. raster di NDVI di diversi mesi avremmo avuto valori diversi



# Stesso identico codice di prima, senza commenti
import os 
import pandas as pd
import rasterio
import geopandas as gpd
import matplotlib.pyplot as plt
from rasterio.plot import show

def geo_dataframe(df):
    geo_df = gpd.GeoDataFrame(df, geometry = gpd.points_from_xy(df['xcoord'], df['ycoord'])) 
    return geo_df

csv_file = (r"C:\lab2_python\pianosa\points_pianosa.csv")
rast_path = (r"C:\lab2_python\pianosa_tanti")

df = pd.read_csv(csv_file)
df = geo_dataframe(df)

for raster_file in os.listdir(rast_path):
    raster = rasterio.open(rast_path + '\\' + raster_file)
    
    L = []
    for index, row in df.iterrows():
        x = row['xcoord']
        y = row['ycoord']
        raster_x, raster_y = raster.index(x, y)
        value = raster.read(1, window = ((raster_y, raster_y + 1), (raster_x, raster_x + 1)))
        L.append(float(value[0][0]))
    
    column_name = 'quota_' + raster_file.split('.')[0]
    df[column_name] = L

output_csv = (r"C:\lab2_python\pianosa_output.csv")
df.to_csv(output_csv, index = False)



# Doppio plot della mappa e del barplot delle coordinate 

