# Assegnazione di variabili
nome = 'chiara'
num = 23
voto = 23.5

print(nome, type(nome))
print(num,type(num))
print(voto, type(voto))



# Changing types
num = 5
num_str = str(num)

print(num, type(num))
print(num_str, type(num_str))



# Assignment by input()
nome = input('inserire nome: ')
print('Il mio nome è ' + nome)



# Format
print('Il mio nome è {}'.format(nome))
# Due modi diversi per fare la stessa cosa

num = int(input('inserire numero: '))
print('la variabile è di tipo {}'.format(num, type(num)))



# Mathematical operations
a = 5
b = 10
print(a, b)

somma = a + b
sottr = a - b
print(somma)
# Scrivere print(somma) e scrivere direttamente nella shell somma è la stessa cosa
print('La somma di {} e {} è {}'.format(a, b, somma))
print('La sottrazione di {} e {} è {}'.format(a,b, sottr))



# String operations
frase1 = 'ciao '
frase2 = 'si '
frase = frase1 + frase2 # Così facendo concateno le due stringhe
frase = frase1 * 3 # Uscirà ciao ciao ciao

a = 'Supercalifragilisti'
b = 'chespiralidoso'
frase = a + b
print(frase)

frase1 = 'andale'
frase2 = 'ariba'
out = (frase1 * 2) + (frase2 * 2)



# Math module
import math # Funziona solo se si fa ogni singola assegnazione manualmente (come riga sotto)
pigreco = math.pi
print(pigreco)
print(math.pi)
# O stessa cosa
from math import * # Con * me li importa tutti
from math import pi # Mi importa solo il pi, non gli altri moduli

from math import *
a1 = pi/2 # 90° in radianti
a2 = pi # 180°
a3 = (3/2) * pi #270°
a4 = 2*pi
sin1 = int(sin(a1)) # int per avere un numero intero, senza decimali; se sin1 = sin(a1) uscirà 1.0; con int uscirà 1
sin2 = int(sin(a2))
sin3 = int(sin(a3))
sin4 = int(sin(a4))
print(sin1, sin2, sin3, sin4)

cos1 = int(cos(a1))
cos2 = int(cos(a2))
cos3 = int(cos(a3))
cos4 = int(cos(a4))
print(cos1, cos2, cos3, cos4)

# Per convertire un angolo in radianti
from math import *
angolo = 180
ang_rad = radians(angolo) # La funzione è radians
print(ang_rad)

# Per convertire da radianti a °
from math import *
radianti = pi # Al posto di pi si può mettere qualsiasi altro numero, es.: 5
ang_grad = int(degrees(radianti)) # La funzione è degrees
print(ang_grad)



# Funzioni
# Funzione
def stampa(n): # Così dichiaro la funzione; stampa è il nome che io dò a questa funzione, potrebbe chiamarsi in qualsiasi altro modo
    return n

# --- main script ---
nome = 'camillo'
print(stampa(nome))

-
def stampa(n):
    return n*2 

# --- main script ---
nome = 'camillo'
print(stampa(nome)) # Uscirà camillocamillo

-
# Funzione
def pippo(n):
    return n*2

# --- main script ---
nome = 'camillo'
nome1 = 'pinguino'
num = 44

print(pippo(nome), pippo(nome1), pippo(num))
# Esce: camillocamillo pinguinopinguino 88

-
# Funzione
def somma(a, b): # Questa funzione deve restituire la somma tra due numeri
    return a + b
# Oppure (stessa cosa)
    s = a + b
    return s

# ---------
num1 = 10
num2 = 6

x = somma(num1, num2)
print(x)
# a e b sono variabili locali (non possono essere richiamate direttamente nel programma; non ci si può accedere da ovunque; esistono solo all'interno della funzione)
# num1 e num2 sono variabili globali (ci si può accedere ad es. dal shell; esistono all'interno di tutto il programma)

-
def somma(x, y):
    s = x + y
    return s
# --- main ---
primo_num = 3
secondo_num = 2
s = somma(primo_num, secondo_num)
print(somma(primo_num, secondo_num))
# Oppure 
print(s)
print('{} + {} = {}'.format(primo_num, secondo_num, s))
          
primo_num = int(input('Inserire primo numero: ')) # Se non si mette int il software legge una stringa e quindi se primo_num = 2; secondo_num = 3; somma = primo_num + secondo_num; uscirà 23 al posto di 5
secondo_num = int(input('Inserire secondo numero: '))


# Esercizio area rettangolo
def area_rettangolo(b,h):
    return b*h
b = int(input('Insperire il primo numero: '))
h = int(input('Inserire il secondo numero: '))

x = area_rettangolo(b, h)

print('{} * {} = {}'.format(b, h, x))


# Esercizio area cerchio
from math import *

def area_cerchio(r):
    return pi*(r**2)

raggio = int(input('Inserire valore raggio: '))
x = area_cerchio(raggio)
x = round(x, 5) # Numero di cifre decimali che voglio dietro la virgola, in questo caso 5

print('{} * {}^2 = {}'.format(pi, raggio, x))

# Esercizio secondi totali(h, m, s)
from math import *
def secondi_totali(h, m, s):
    return (h*3600) + (m*60) + s

h = 5
m = 2
s = 23

print(secondi_totali(h, m, s))



# Conditional Execution
def num_max(a, b):
    if a > b:
        return a # Restituzione della variabile con il numero maggiore
    elif b > a: # altro if
        return b
    elif a == b: # == confronto
        return False
# ---main---
num1 = 2
num2 = 3

print(num_max(num1, num2))


# Stessa cosa usando l'input
def num_max(a, b):
    if a > b:
        return a # Restituzione della variabile con il numero maggiore
    elif b > a: # Altro if
        return b
    elif a == b: # == confronto; al posto di elif si può anche scrivere else: (in questo caso non si deve scrivere a == b)
        return False
# ---main---
num1 = int(input('Inserire num1: '))
num2 = int(input('Inserire num2: '))

print('Il numero maggiore è {}'.format(num_max(num1, num2)))


# Funzione che mi restituisce 'True' se il numero è pari e 'False' se dispari
def par_dis(n):
    if n % 2 == 0: # % è il modulo
        return True
    elif n % 2 > 0:
        return False

num1 = int(input('Inserire num1: '))
print('Il numero è pari? {}'.format(par_dis(num1)))


# Funzione se n è compreso tra 0 e 10
def n0_10(n):
    if n >= 0 and n <= 10: # And e or sono valori booliani
        return True
    return False # Non devo riscrivere elif, basta return

num = 10
print(n0_10(num))


# Funzione tipo
def chetipo(a):
    if type(a) == str:
        return True
    return False
# Nel shell scrivo parola 'banana'; sotto: chetipo('banana'); uscirà: True; se srivo chetipo(4); uscirà: False


# Funzione che valuta se la stringa a è più lunga della stringa b:
def lunghezza(a, b):
    if len(a) == len(b):
        return None
    elif len(a) > len(b):
        return True
    else:
        return False
    
str1 = 'avocado'
str2 = 'papaya'

print(str1, len(str1), str2 len(str2), lunghezza(str1, str2))
# Oppure se nel print ci serve solo True o False
print(lunghezza(str1, str2))
# Oppure se non serve che la stringa 'avocado' e 'papaya' siano reiterate nel print
print(len(str1), len(str2), lunghezza(str1, str2))



# Iterazione e ricorsione
# Iterazione
def conto_alla_rovescia_iter(n):
    if n == 0:
        print('Fine conto alla rovescia!')
    else:
        print(n)
        # The algoritm invokes itself...
        conto_alla_rovescia_iter(n - 1) # Con (n - 2) il conto alla rovescia non sarà più 10, 9, 8, 7 ecc. ma 10, 8, 6, 4, 2

conto_alla_rovescia_iter(10)


# Ricorsione
def conto_alla_rovescia_ric(n):
   while n > 0:
        print(n)
        n = n - 1 
   print('Fine conto alla rovescia!)
conto_alla_rovescia_ric(10) # Esce la stessa cosa come nell'Iterazione
 
 def conto_alla_rovescia_ric(n):
   while n == 0:
        print(n)
        n = n - 1 # Si può scrivere anche n -= 1
    print('Fine conto alla rovescia!')

conto_alla_rovescia_ric(10)
        
        
# Stessa cosa si può fare anche con 'for', noi utilizzeremo principalmente questo ciclo

def conto_alla_rovescia_for() # Non serve un parametro, a noi serve solo il range e quello lo dichiariamo al suo interno
    cont = range(0, 11)
    for i in cont:
        print(i)
        
conto_alla_rovescia_for()


# Esercizio: fattoriale di un numero naturale n
def fatt(n):
    if n == 0:
        return 1 
    #else:
    return n * fatt(n-1)

# Oppure sfruttando l'iterazione al posto della ricorsione

def fatt_iter(n):
    res = 1
    for i in range(1, n + 1):
        res *= i # Stessa cosa di res = res * i
    return res # Quando esce dal ciclo/quando questa condizione non si verifica più mi restituisce res
    
print(fatt_iter(4))



# Le liste (iniziano sempre da zero; primo valore = 0)
lista = [2, 8, 15, -1, 63, 12, 8, 82, 2, 2, 2] # Lista di interi
for element in lista:
    print(element) # Stampa tutta la lista degli elementi
    
    print(element**3) # Stampa valori al cubo

L = ['patate', 'carciofi', 'zucchero', 'caffè', 'mela', 'latte', 'cocco'] 
# Se non voglio stampare la lista intera, ma solo alcune
L[2:5] # Nello shell compariranno le parole da zucchero a latte

# Nello shell:
s = 'scolapasta'
s[2:5] # Uscirà ola

s1 = ciaociao
s2 = s[0:4] # Uscirà solo ciao, in quanto prende solo i primi 4 elementi
stot = s + s2 # Uscirà scolapastaciao
stot2 = s + ' ' + s2 # Così uscirà scolapasta ciao; abbiamo aggiunto uno spazio; si può acnhe aggiungere ad es. un punto di domanda '?'

# Funzione per contare quante volte compare un valore in una lista
def conta_el(l,n): # Parametro: lista, numero
    c = 0 # Contatore parte da 0, variabile vuota, ci vuole 0
    for el in l:
        if el == n: # Se l'elemento è uguale ad n (n è il numero che noi passiamo come paramentro) incremento il contatore 
            c = c + 1 # Incrementa il contatore; ogni volta che questa condizione si verifica il contatore verrà incrementato; più elegante: c += 1 stessa cosa
        else: # Se l'elemento è diverso dal numero che noi stiamo andando a cercare
            pass # Con pass lo script non fa niente, va oltre, lo passa
    return c # Ritorna al ciclo; quindi passa gli elementi e ritorna al ciclo finché gli elementi della lista non finiscono, finché non arriva alla fine della lista
  
lista = [2, 8, 15, -1, 63, 12, 8, 82, 2, 2, 2] # Prima si scrive la funzione, solo dopo si mette la lista
print(conta_el(lista, 2)) # Uscirà 4, in quanto l'elemento 2 compare 4 volte nella lista


# Append (appendere dei valori all'interno delle liste)
def insert_input():
    L = []
    for el in range (10): # Questa lista ha 10 posizioni: da 0 a 9; dunque, finché la lista non arriva a 10 noi possiamo aggiungere valori (nello shell)
        b = input
        L.append(b)
    print(L)
insert_input()


# Modulo Random
from random import *
def insert_random(n, L):
    L = [] # Dichiaro una lista vuota in cui 'appendere' dei valori
    for el in range(10): # Per ogni elemento nel range di 10
        b = randint(0, 10) # Creo una variabile in cui vado a mettere un numero random che va da 0 a 10 (numero intero = randint)
        L.append(b) # Alla lista appendo questo numero
    print(L)
    if n in L: # Se questo numero è presente nella lista stampa:
        print('Il numero {} è presente nella lista!'.format(n))
    elif n not in L: # Si può anche mettere direttamente else o indentare prima il print (senza elif o else9)
        print('Il numero {} non è presente nella lista!'.format(n))

num = input('Scegli numero: ')
insert_random(num)


# Serie numerica di fibonacci con liste e ricorsione 
def fibonacci(n):
    if n <= 0:
        return [] # Mi stampa una lista vuota
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        fib = fibonacci(n-1)
        fib.append(fib[-1] + fib[-2]) # Alla lista vado ad appendere questi due elementi
        return fib

n = int(input('Inserisci un numero: '))
fib_sec = fibonacci(n)
print('I primi {} numeri della serie di Fiboncci sono {}:'.format(n, fib_sec))



# Fotoframmetria
# Calcolo distanza di presa
# Per calcolare la distanza di presa ci servono i seguenti parametri: GSD, distanza, dimensione del pixel
dist_presa = float((gsd * dist) / dim) # Formula = (GSD * dis) / dim
