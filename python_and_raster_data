# Aprire qgis; console python; mostra editor
from osgeo import gdal
my_data =gdal.Open("C:/lab2_python/pianosa/pianosa_dem.tif")
print(my_data.GetMetadata()) # Stampa metadati

band = my_data.GetRasterBand(1) # In questo caso prendiamo la prima banda; lavoriamo con valori di quota (DEM)
band_value = band.ReadAsArray() # Leggere i valori di band come un array; l'array legge la banda come se fosse una matrice
print(band_value) # Esce una lista di liste: tutti i valori sono zero perché riprendono il mare

print(type(band))
print(band_value[400, 500]) # Esce il valore di pixel che ha queste coordinate (400 e 500)


# Get spatial references of the raster
spatial = my_data.GetSpatialRef()
print(spatial) # Stampa di tutte le informazioni spaziali relative al raster: proiezione. sistema di riferimento, datum, assi


# Sampling
def sample(table, raster): # Parametri della funzione: il csv che dobbiamo utilizzare per il campionamento (table) e il raster su cui dobbiamo lavorare
sample("C:/lab2_python/pianosa/points_pianosa.csv", "C:\lab2_python\pianosa\pianosa_dem.tif") # Path che contiene il csv + il path del raster su cui stiamo andando a lavorare
# Per non dover sempre copiare tutto il path si possono creare delle variabili che vanno a richiamare direttamente il path, così il sample sarà più corto


# Creazione di un nuovo file per questa funzione (più in alto a sinistra)
from osgeo import gdal
import csv 

def sample(table, raster):
    data = gdal.Open(raster) # Aprire il dato raster
    band = data.GetRasterBand(1) # Leggere la banda di questo raster, la prima è l'unica di questo raster
    band_arr = band.ReadAsArray() # Leggere la banda come un array, come una matrice di numeri
    gt = data.GetGeotrasform() # Creazione di una variabile che contiene la geotrasformata (= serve per convertire le coordinate mappa in coordinate pixel; sono valori di tipo tupla: valori dentro la tupla non possono essere modificati, non possono essere aggiunti e tolti valori)
    
    my_csv = open(table, 'r') # Aprire il csv ci serve per andare a fare il campionamento su questo raster
    punti = csv.reader(my_csv, delimiter = ',') # Andiamo a creare un reader che ha la virgola come delimitatore
    
    header = ['id', 'nome', 'stato', 'coordx', 'coordy']
    L = [] # Lista vuota (superlista) nella quale verranno accumulate tutte le righe del csv


# Creazione di un loop (come sempre quando si lavora con csv)
for row in  punti: 
    # Per tutte le righe del file csv andiamo a dichiarare delle variabili che contengono i valori delle righe 3 e 4 
    xcoord = float(row[3]) # Va a prendere tutti i valori che si trovano nella riga/lista 3 (la riga delle coordinate x) per ogni ciclo e in ogni ciclo cambieranno, dato che va a scorrere tutte le righe
    ycoord = float(row[4])
    
    # Creazione di nuove variabili: andiamo a calcolare le coordinate pixel/raster; si calcolano utilizzando la geotrasformata
    px = int((xcoord - gt[0]) / gt[1]) # 0 = coordinata x; 1 = risoluzione del pixel
    py = int((ycoord - gt[3]) / gt[5]) # 3 = coordianta y; 5 = risoluzione del pixel
    
    # Andiamo a leggere la prima banda in queste coordinate pixel
    quota = band_arr[py, px]
    row.append(quota) # Aggiungo il valore alla lista, lo vado ad appendere
    L.append(row) # Alla fine si appende questa lista alla superlista


# Creazione di un nuovo csv di scrittura
new_csv = open("C:/lab2_python/pianosa/points_pianosa.csv", 'w') 
writer = csv.writer(new_csv, delimiter = ',')
writer.writerows(L)

# Chiusura di tutti i dati aperti
data = None # None perché il raster non ci serve più, quindi lo chiudiamo
my_csv.close()
new_csv.close


# Richiamare la funzione
sample("C:/lab2_python/pianosa/points_pianosa.csv", "C:/lab2_python/pianosa/pianosa_dem.tif")
print('Done')



# OS 
# = Fornisce delle funzioni che ci permettono di interagire con un sistema operativo
import os
os.chdir("C:\lab2_python") # Settaggio della working directory; prende tutti i dati di quella cartella. Dopo questa operazione non c'è più nessun bisogno di andare a specificare il path dei file

# Andiamo a leggere le righe del csv come dizionario dict() e non come liste list()
punti = csv.DictReader(my_csv, delimiter = ',')

L = []
for row in punti:
    list_row = [] # Creiamo questa minilista di appoggio per andare ad aggiungere tutti i valori di ogni riga ogni ciclo
    xcoord = float(row['xcoord']) # Non gli andiamo più a dare il ciclo, ma il nome della colonna; gli diciamo che la colonna x la troviamo in questo indice del dizionario
    ycoord = float(row['ycoord'])
    px = int((xcoord - gt[0] / gt[1]) # Coordinate raster, passaggio uguale a quello di prima
    py = int((ycoord - gt[3] / gt[5])
    quota = float(band.ReadAsArray(px, py, 1, 1)) # Differenza rispetto a prima: la banda viene letta come array; 1 e 1 sono quanti valori va a leggere (è più una formalità che altro); prende il valore del pixel che corrisponde alle coordinate raster di px e py sull'array
    
# Dunque, nella list_row verranno appesi i valori ogni riga per ogni ciclo; stessa cosa di prima solo che va a considerare le righe non come liste ma come dizionario

# I valori relativi alla quota saranno aggiunti ciclicamente al dizionario
    list_row.append(row['id']) # Per ogni lista si va ad aggiungere la riga
    list_row.append(row['luogo'])
    list_row.append(row['stato'])
    list_row.append(row['xcoord'])
    list_row.append(row['ycoord'])
    list_row.append(quota)
    L.append(list_row) # Alla superlista appendiamo tutte le righe
# Alla fine tutte le liste conteranno tutti i valori che sono stati appesi alla lista più grande (L)


# Creazione di un nuovo file utilizzando la funzione .split()
new_name = tabella.split(',')[0] + "._quote2.csv" # Serve il file che abbiamo appena creato; Se ho una variabile che contiene un nome la vado a splittare nel punto in cui c'è questo carattere (',') e poi vado ad aggiungere questo tipo di stringa "._quote2.csv"
new_csv = open(new_name, 'w') # Per aprire un nuovo csv gli passo un nuovo nome, gli dico che si tratta di scrittura (w)
writer = csv.writer(new_csv, delimiter = ',') # Quando me lo va a scrivere, me lo scrive con questo nome "._quote2.csv"


# Cambiare il sistema di riferimento a un raster
# Le coordinate geografiche (GCS = Geographic Coordinate System) si possono convertire in Spatial Reference System (SRS)
gdal.Warp('nome raster di output', 'nome raster di partenza' dstSRS = 'nome del sistema di riferimento che vogliamo') # Stiamo ancora lavorando all'interno della working directory (OS), quindi non dobbiamo specificare il path del file, basta specificare il nome del file


